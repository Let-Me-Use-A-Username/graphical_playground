==============================================
================== Critical ==================
- Implement different kinds of enemies.
    - Rect
        - Health removal works, but triggers at least 2 times per frame.
            - Fix this. Timer?
            - Keep it to provide true randomness ? XD

- Players Shield might need a slight rework regarding the Chargers discharge.
    - Collision with Rect triggers all usages
        - When shield is used, add a timer to count when to remove a charge
- Implement bosses

==============================================
================== General todo ==============
- Idea for re-implementing player movement:
    - Player Moving/Drifting
        - Consider the following:
            - Change players Moving (rotating) anchor point (offset in Rect) to be top middle
                - In drift, change it to be the middle
            - Change back tires to provide moving force

- Implement ErrorHandler
    -Change component function to return Results 
        -Log these results if error occurs

    
==============================================
================== Gameplay ==================
- Implement a `hold velocity` mechanic, that slows down the player but after released, provides a burst of movement
    - Substitute with boost?


==============================================
================== Testing ===================
- Player Test
    -Test handbrake mechanic(Check forward and lateral friction)
        -Faster or slower? (if faster revert to old frictions, else increase them)
        -Turns too much or too little?
    -Test Players base turn rate (rotation when not drifting)
    -Not inputting movement losses velocity too fast
    -Player no longer has drag when running enemies over and is immune
    -Players boost is quite weak, and only useful when velocity is lows
        - Perhaps adopt this lower speed philoshophy
- Enemies
    -Triangle
        - Firing distance 
        - Firing cooldown (timer cooldown)
        - Movement speed

- Component Test
    - MetalArtist:
        - Monitor memory usage (especially freed memory)

==============================================
================== Gameplay Design and Ideas==
- Implement firing angle modifier based on mouse scroll. Instead of literally zooming.


 
==============================================
================== Implementation ideas ======
- Implement better UI
    - Implement fullscreen with  macroquad::prelude::Conf
        - Function macroquad::window::set_fullscreen ?
            - When settings are changed, restart game to run them (hot reload)
    - Implement Tinkering menu for different player-based aspects, variables, skins, sounds etc
    - Draw bullet ammunition UI
    - Draw Shield charges
    - Draw Boost charges

- Consider changing state machine to be an enum type
    - Enemy Machine
    - Object machine
    - Player machine etc

- Implement collision layers like in unity

==============================================
================== Notes =====================
- If *memory leaks* occur in the future, there is a chance that one of the following will be at fault
    - Event queue is pushed faster than consumed
    - Grids operation queue doesn't drain properly
    - Emitters aren't dropped correctly from MetalArtist
    - Cyrcle Arc references inside game manager

- Colliders:
    - Projectile colliders extend past the sprite, only forward.

==============================================
================== Study =====================
- Entity component system
- https://domwillia.ms/devlog1/
