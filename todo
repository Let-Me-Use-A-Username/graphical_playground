==============================================
================== Final Roadmap =============
- Implement music 

- Implement Boss
    - use shape outlines to highlight them.

- Implement basic menu UI

- Implement score?

==============================================
================== Critical ==================
- Player 
    - Boost
        - At max speed the boost shifts the player slightly left or right
            - Happends due to normalization
                - *Fixed by capping velocity at which the player can boost*
        - When changing the audio emission the dash sometimes is huge
            - Is affected from boost timer + asynchronous behavior
                - *POSSIBLY fixed by setting timer inside condition*
        - Boosts extra when no forwards / backwards input
    - Movement
        - Change when and how the velocity caps while Moving / drifting

- Rework players boost
    - Decide whether it should be used at all times (velocity wise)
        - When Drifting?
    - Decide how much of a boost it should apply (magnitude)
    - Idea: Boost increases past the limit. Moving state bring it down to threshold quickly

==============================================
================== Current ===================


==============================================
================== General todo ==============
    
==============================================
================== Gameplay ==================
- Implement a `hold velocity` mechanic, that slows down the player but after released, provides a burst of movement
    - Substitute with boost?


==============================================
================== Testing ===================

- Test in Player Drift:
    - When drifting, letting go off forwards / backwards,  turning, and 
        then applying Forwards/backwards input, increaes velocity
            - *UNSURE whether I want to keep this*
            - *Player Test ???*
    - When drifting, and altering from forward to backwards momentum, 
        the velocity in maintained instead of going to zero and then negative
            - *UNSURE whether I want to keep this*
            - *Player Test ???*

- In release version, player movement feels different. Test it


- Enemies
    -Triangle
        - Firing distance 
        - Firing cooldown (timer cooldown)
        - Movement speed

- Component Test
    - MetalArtist:
        - Monitor memory usage (especially freed memory)
    - Collision Detector/Tracker and Collider 
        - Check responsiveness of Collision system in general

==============================================
================== Gameplay Design and Ideas==


 
==============================================
================== Implementation ideas ======
- Implementing editor that hot reloads variables?

- Implement better UI
    - Implement fullscreen with  macroquad::prelude::Conf
        - Function macroquad::window::set_fullscreen ?
            - When settings are changed, restart game to run them (hot reload)
    - Implement Tinkering menu for different player-based aspects, variables, skins, sounds etc
    - Draw bullet ammunition UI
    - Draw Boost charges

- Performance enhancing ideas
    - Make an asynchronous and synchronous update loop


- Implement ErrorHandler
    -Change component function to return Results 
        -Log these results if error occurs

==============================================
================== Notes =====================
- If *memory leaks* occur in the future, there is a chance that one of the following will be at fault
    - Event queue is pushed faster than consumed
    - Grids operation queue doesn't drain properly
    - Emitters aren't dropped correctly from MetalArtist
    - Cyrcle Arc references inside game manager
    - MetalArtists Config is set to one shot but spawns every frame. (RectMove incident)

- Colliders:
    - Projectile colliders extend past the sprite, only forward.

==============================================
================== Study =====================
- Entity component system
- https://domwillia.ms/devlog1/
